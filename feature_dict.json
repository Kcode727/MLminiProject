{
  "Store": {
    "category": "Raw",
    "why": "Directly provided in the dataset \u2013 store impacts sales.",
    "example": "df['Store']"
  },
  "Temperature": {
    "category": "Raw",
    "why": "Directly provided in the dataset \u2013 temperature impacts sales.",
    "example": "df['Temperature']"
  },
  "Fuel_Price": {
    "category": "Raw",
    "why": "Directly provided in the dataset \u2013 fuel_price impacts sales.",
    "example": "df['Fuel_Price']"
  },
  "CPI": {
    "category": "Raw",
    "why": "Directly provided in the dataset \u2013 cpi impacts sales.",
    "example": "df['CPI']"
  },
  "Unemployment": {
    "category": "Raw",
    "why": "Directly provided in the dataset \u2013 unemployment impacts sales.",
    "example": "df['Unemployment']"
  },
  "Holiday_Flag": {
    "category": "Raw",
    "why": "Directly provided in the dataset \u2013 holiday_flag impacts sales.",
    "example": "df['Holiday_Flag']",
    "plot_type": "bar_boost",
    "plot_data": {
      "feature": "Holiday_Flag"
    }
  },
  "Year": {
    "category": "Date",
    "why": "Temporal patterns (seasonality, year-over-year growth).",
    "example": "df['Date'].dt.year"
  },
  "Month": {
    "category": "Date",
    "why": "Temporal patterns (seasonality, year-over-year growth).",
    "example": "df['Date'].dt.month"
  },
  "Week": {
    "category": "Date",
    "why": "Temporal patterns (seasonality, year-over-year growth).",
    "example": "df['Date'].dt.week"
  },
  "Quarter": {
    "category": "Date",
    "why": "Temporal patterns (seasonality, year-over-year growth).",
    "example": "df['Date'].dt.quarter"
  },
  "DayOfYear": {
    "category": "Date",
    "why": "Temporal patterns (seasonality, year-over-year growth).",
    "example": "df['Date'].dt.dayofyear"
  },
  "IsMonthStart": {
    "category": "Date",
    "why": "Temporal patterns (seasonality, year-over-year growth).",
    "example": "df['Date'].dt.ismonthstart"
  },
  "IsMonthEnd": {
    "category": "Date",
    "why": "Temporal patterns (seasonality, year-over-year growth).",
    "example": "df['Date'].dt.ismonthend"
  },
  "Month_sin": {
    "category": "Cyclical",
    "why": "Sine encoding of month \u2013 removes ordinal bias.",
    "example": "np.sin(2*np.pi*df['Month']/ 12)",
    "plot_type": "cyclical",
    "plot_data": {
      "period": 12
    }
  },
  "Month_cos": {
    "category": "Cyclical",
    "why": "Cosine encoding of month.",
    "example": "np.cos(2*np.pi*df['Month']/ 12)",
    "plot_type": "cyclical",
    "plot_data": {
      "period": 12
    }
  },
  "Week_sin": {
    "category": "Cyclical",
    "why": "Sine encoding of week \u2013 removes ordinal bias.",
    "example": "np.sin(2*np.pi*df['Week']/ 52)",
    "plot_type": "cyclical",
    "plot_data": {
      "period": 52
    }
  },
  "Week_cos": {
    "category": "Cyclical",
    "why": "Cosine encoding of week.",
    "example": "np.cos(2*np.pi*df['Week']/ 52)",
    "plot_type": "cyclical",
    "plot_data": {
      "period": 52
    }
  },
  "Sales_Lag_1": {
    "category": "Lag",
    "why": "Sales 1 week(s) ago \u2013 captures autocorrelation.",
    "example": "df.groupby('Store')['Weekly_Sales'].shift(1)",
    "plot_type": "scatter_lag",
    "plot_data": {
      "lag": 1
    }
  },
  "Sales_Lag_2": {
    "category": "Lag",
    "why": "Sales 2 week(s) ago \u2013 captures autocorrelation.",
    "example": "df.groupby('Store')['Weekly_Sales'].shift(2)",
    "plot_type": "scatter_lag",
    "plot_data": {
      "lag": 2
    }
  },
  "Sales_Lag_4": {
    "category": "Lag",
    "why": "Sales 4 week(s) ago \u2013 captures autocorrelation.",
    "example": "df.groupby('Store')['Weekly_Sales'].shift(4)",
    "plot_type": "scatter_lag",
    "plot_data": {
      "lag": 4
    }
  },
  "Sales_Lag_8": {
    "category": "Lag",
    "why": "Sales 8 week(s) ago \u2013 captures autocorrelation.",
    "example": "df.groupby('Store')['Weekly_Sales'].shift(8)",
    "plot_type": "scatter_lag",
    "plot_data": {
      "lag": 8
    }
  },
  "Sales_Lag_12": {
    "category": "Lag",
    "why": "Sales 12 week(s) ago \u2013 captures autocorrelation.",
    "example": "df.groupby('Store')['Weekly_Sales'].shift(12)",
    "plot_type": "scatter_lag",
    "plot_data": {
      "lag": 12
    }
  },
  "Sales_RollMean_4": {
    "category": "Rolling",
    "why": "mean of sales over last 4 weeks \u2013 trend / volatility.",
    "example": "df.groupby('Store')['Weekly_Sales'].rolling(4).mean()",
    "plot_type": "rolling_demo",
    "plot_data": {
      "window": 4
    }
  },
  "Sales_RollStd_4": {
    "category": "Rolling",
    "why": "std of sales over last 4 weeks \u2013 trend / volatility.",
    "example": "df.groupby('Store')['Weekly_Sales'].rolling(4).std()",
    "plot_type": "none",
    "plot_data": {
      "window": 4
    }
  },
  "Sales_RollMean_8": {
    "category": "Rolling",
    "why": "mean of sales over last 8 weeks \u2013 trend / volatility.",
    "example": "df.groupby('Store')['Weekly_Sales'].rolling(8).mean()",
    "plot_type": "rolling_demo",
    "plot_data": {
      "window": 8
    }
  },
  "Sales_RollStd_8": {
    "category": "Rolling",
    "why": "std of sales over last 8 weeks \u2013 trend / volatility.",
    "example": "df.groupby('Store')['Weekly_Sales'].rolling(8).std()",
    "plot_type": "none",
    "plot_data": {
      "window": 8
    }
  },
  "Sales_RollMean_12": {
    "category": "Rolling",
    "why": "mean of sales over last 12 weeks \u2013 trend / volatility.",
    "example": "df.groupby('Store')['Weekly_Sales'].rolling(12).mean()",
    "plot_type": "rolling_demo",
    "plot_data": {
      "window": 12
    }
  },
  "Sales_RollStd_12": {
    "category": "Rolling",
    "why": "std of sales over last 12 weeks \u2013 trend / volatility.",
    "example": "df.groupby('Store')['Weekly_Sales'].rolling(12).std()",
    "plot_type": "none",
    "plot_data": {
      "window": 12
    }
  },
  "Holiday_Unemp": {
    "category": "Interaction",
    "why": "Multiplicative effect between two drivers.",
    "example": "df['Holiday'] * df['Unemp']"
  },
  "Holiday_Temp": {
    "category": "Interaction",
    "why": "Multiplicative effect between two drivers.",
    "example": "df['Holiday'] * df['Temp']"
  },
  "CPI_Unemp": {
    "category": "Interaction",
    "why": "Multiplicative effect between two drivers.",
    "example": "df['CPI'] * df['Unemp']"
  },
  "Week_Counter": {
    "category": "Meta",
    "why": "How many weeks of history the store has \u2013 proxy for maturity.",
    "example": "df.groupby('Store').cumcount() + 1"
  }
}